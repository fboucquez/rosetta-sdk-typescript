/* tslint:disable */
/* eslint-disable */
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { NetworkIdentifier, NetworkIdentifierFromJSON, NetworkIdentifierToJSON } from './';

/**
 * ConstructionParseRequest is the input to the `/construction/parse` endpoint. It allows the caller to parse either an unsigned or signed transaction.
 * @export
 * @interface ConstructionParseRequest
 */
export interface ConstructionParseRequest {
    /**
     *
     * @type {NetworkIdentifier}
     * @memberof ConstructionParseRequest
     */
    network_identifier: NetworkIdentifier;
    /**
     * Signed is a boolean indicating whether the transaction is signed.
     * @type {boolean}
     * @memberof ConstructionParseRequest
     */
    signed: boolean;
    /**
     * This must be either the unsigned transaction blob returned by `/construction/payloads` or the signed transaction blob returned by `/construction/combine`.
     * @type {string}
     * @memberof ConstructionParseRequest
     */
    transaction: string;
}

export function ConstructionParseRequestFromJSON(json: any): ConstructionParseRequest {
    return ConstructionParseRequestFromJSONTyped(json, false);
}

export function ConstructionParseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstructionParseRequest {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        network_identifier: NetworkIdentifierFromJSON(json['network_identifier']),
        signed: json['signed'],
        transaction: json['transaction'],
    };
}

export function ConstructionParseRequestToJSON(value?: ConstructionParseRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        network_identifier: NetworkIdentifierToJSON(value.network_identifier),
        signed: value.signed,
        transaction: value.transaction,
    };
}
