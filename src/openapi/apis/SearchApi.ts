/* tslint:disable */
/* eslint-disable */
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    SearchTransactionsRequest,
    SearchTransactionsRequestFromJSON,
    SearchTransactionsRequestToJSON,
    SearchTransactionsResponse,
    SearchTransactionsResponseFromJSON,
    SearchTransactionsResponseToJSON,
} from '../models';
import * as runtime from '../runtime';

export interface SearchTransactionsOperationRequest {
    searchTransactionsRequest: SearchTransactionsRequest;
}

/**
 * SearchApi - controller interface for the server side implementation.
 *
 * @export
 * @interface SearchApiController
 */
export class SearchApiController<Req extends { body: any } = { body: any }> {
    /**
     *
     * @param service - The service that implements
     */
    constructor(private readonly service: SearchApiService) {}

    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * [INDEXER] Search for Transactions
     *
     *  @param req - The request object, where the body is a SearchTransactionsRequest
     */
    searchTransactions(req: Req): Promise<any> {
        return this.service.searchTransactions(SearchTransactionsRequestFromJSON(req.body)).then(SearchTransactionsResponseToJSON);
    }
}

/**
 * SearchApi - service interface for the server side implementation.
 *
 *
 * @export
 * @interface SearchApiService
 */
export interface SearchApiService {
    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * [INDEXER] Search for Transactions
     *
     * requestParameters - the body of the RPC style request.
     */
    searchTransactions(requestParameters: SearchTransactionsRequest): Promise<SearchTransactionsResponse>;
}

/**
 * SearchApi - interface
 *
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * @summary [INDEXER] Search for Transactions
     * @param {SearchTransactionsRequest} searchTransactionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchTransactionsRaw(
        requestParameters: SearchTransactionsOperationRequest,
        initOverrides?: RequestInit,
    ): Promise<runtime.ApiResponse<SearchTransactionsResponse>>;

    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * [INDEXER] Search for Transactions
     */
    searchTransactions(
        requestParameters: SearchTransactionsOperationRequest,
        initOverrides?: RequestInit,
    ): Promise<SearchTransactionsResponse>;
}

/**
 *
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {
    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * [INDEXER] Search for Transactions
     */
    async searchTransactionsRaw(
        requestParameters: SearchTransactionsOperationRequest,
        initOverrides?: RequestInit,
    ): Promise<runtime.ApiResponse<SearchTransactionsResponse>> {
        if (requestParameters.searchTransactionsRequest === null || requestParameters.searchTransactionsRequest === undefined) {
            throw new runtime.RequiredError(
                'searchTransactionsRequest',
                'Required parameter requestParameters.searchTransactionsRequest was null or undefined when calling searchTransactions.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/search/transactions`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SearchTransactionsRequestToJSON(requestParameters.searchTransactionsRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * [INDEXER] Search for Transactions
     */
    async searchTransactions(
        requestParameters: SearchTransactionsOperationRequest,
        initOverrides?: RequestInit,
    ): Promise<SearchTransactionsResponse> {
        const response = await this.searchTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
